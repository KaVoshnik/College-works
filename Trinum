def build_R(N):
    trinum = ''  # Переменная для хранения троичной записи числа N
    while N > 0:
        trinum = str(N % 3) + trinum
        N = N // 3

    if int(trinum) % 3 == 0:
        R = trinum + trinum[-3:]
    else:
        R = trinum + str((int(trinum) % 3) * 3)

    return R

# Ввод числа N с клавиатуры
N = int(input("Введите число N: "))
# Выполнение кода
R = build_R(N)
print("Результат R для числа", N, ":", R)


#1: Функция build_R(N), которая принимает на вход число N и возвращает строку R.
#2: Внутри функции мы создаем пустую строку trinum, в которую будем записывать троичное представление числа N.
#3: Запускаем цикл while, который продолжается до тех пор, пока число N больше 0. На каждом шаге мы добавляем к строке trinum остаток от деления N на 3 (N % 3) и делим N нацело на 3 (N // 3).
#4: Проверяем условие if int(trinum) % 3 == 0: если число, представленное в троичной системе, кратно 3, то результат R будет равен конкатенации trinum и трех последних символов из trinum.
#5: Иначе R будет равен конкатенации trinum и утроенного остатка от деления числа, представленного в троичной системе, на 3.

#Конкатенация — операция склеивания объектов линейной структуры, обычно строк.
